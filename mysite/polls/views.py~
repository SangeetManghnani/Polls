from django.shortcuts import get_object_or_404, render

from django.http import Http404

from django.http import HttpResponseRedirect, HttpResponse
#if you comment the above line, index will work but not others
from .models import Question, Choice

from django.core.urlresolvers import reverse

from django.views import generic
#3.from django.template import RequestContext, loader

#8.def index(request):
#8.	latest_question_list = Question.objects.order_by('-pub_date')[:5]
#8.	context = {'latest_question_list' : latest_question_list}
#8,	return render(request, 'polls/index.html', context)
	#3.template = loader.get_template('polls/index.html')
	#3.context = RequestContext(request, {'latest_question_list' : latest_question_list,})
	#3.return HttpResponse(template.render(context))
	#2.output = ','.join([p.question_text for p in latest_question_list])
	#2.return HttpResponse(output)
	#1.return HttpResponse("Hello Everyone, Welcome to the Polls index.")
	
class IndexView(generic.ListView):
	template_name = 'polls/index.html'
	context_object_name = 'latest_question_list'
	
	def get_queryset(self):
		return Question.objects.order_by('-pub_date')[:5]

class DetailView(generic.DetailView):
	model = Question
	template_name = 'polls/detail.html'


class ResultsView(generic.DetailView):
	model = Question
	template_name = 'polls/results.html'
#8.def detail(request, question_id):
	#4. return HttpResponse("You're looking at the question %s." % question_id)
#5	try:
#5		question = Question.objects.get(pk = question_id)
#5	except Question.DoesNotExist:
#5		raise Http404("Question Does not Exist")
#8.	question = get_object_or_404(Question, pk=question_id)	
#8.	return render(request, 'polls/detail.html', {'question' : question})

#8.def results(request, question_id):
#8.	question = get_object_or_404(Question, pk=question_id)
#8.	return render(request, 'polls/results.html', {'question' : question})
	#7.response = "You're looking at the result of question %s."
	#7.return HttpResponse(response % question_id)

def vote(request, question_id):
 	p = get_object_or_404(Question, pk = question_id)
	try:
		selected_choice = p.choice_set.get(pk=request.POST['choice'])
	except (KeyError, Choice.DoesNotExist):
		return render(request, 'polls/detail.html', {
			'question' : p,
			'error_message' : "You didn't select a choice.",
		})
	else:
		selected_choice.votes += 1
		selected_choice.save()
		return HttpResponseRedirect(reverse('polls:results', args=(p.id,)))
		

	#6.return HttpResponse("You're voting on question %s." % question_id)

